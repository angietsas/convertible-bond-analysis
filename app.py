# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15eoAYZ3OlnXMkKh4esWgXAZjiwX01f2d
"""

import streamlit as st
import pandas as pd
import numpy as np
import numpy_financial as npf
import yfinance as yf
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Page config
st.set_page_config(layout="wide")

# Load and clean data
df_data = pd.read_csv("bond_data.csv")
df_data['Pricing Date'] = pd.to_datetime(df_data['Pricing Date'], errors='coerce')
df_data['Maturity Date'] = pd.to_datetime(df_data['Maturity Date'], errors='coerce')

# UI inputs
ticker = st.text_input("Enter Ticker (e.g. CRM)")
bond_row = None

if ticker:
    ticker = ticker.upper()
    ticker_bonds = df_data[df_data['Ticker from BQNT'] == ticker]

    if ticker_bonds.empty:
        st.warning(f"No bonds found for ticker: {ticker}")
    else:
        bond_name = st.selectbox("Select Bond", ticker_bonds['Name'].tolist())
        if st.button("Go"):
            bond_row = ticker_bonds[ticker_bonds['Name'] == bond_name].iloc[0]

            # Extract bond-specific values
            start_date = bond_row['Pricing Date'] - pd.DateOffset(months=3)
            end_date = bond_row['Maturity Date']
            conv_premium = float(bond_row['Conversion Premium'])
            upper_premium = float(bond_row['Effective Premium'])
            derivative_cost_percent = float(bond_row['Cost in Bond Points'])
            principal = float(bond_row['Issue Size ($mm)'])
            coupon = float(bond_row['Coupon'])
            conversion_price = float(bond_row['Conversion Price (adjusted)'])
            term = float(bond_row['Term'])

            def get_data(ticker, start_date, end_date):
                df = yf.download(ticker, start=start_date, end=end_date)
                df = df.stack(level=1, future_stack=True)
                df = df.reset_index()[['Date', 'Close']].rename(columns={'Date': 'Date', 'Close': 'Last Price'})
                df['Date'] = pd.to_datetime(df['Date'])
                return df

            df = get_data(ticker, start_date, end_date)
            if df.empty:
                st.error("No stock data available.")
                st.stop()

            initial_price = df['Last Price'].iloc[0]
            upper_strike = initial_price * (1 + upper_premium / 100)
            conversion_price = initial_price * (1 + conv_premium / 100)
            derivative_cost = principal * (derivative_cost_percent / 100)
            underlying_shares = principal / conversion_price

            def coc(initial_price, stock_price):
                semi_coupon = principal * (coupon / 100) / 2
                n_periods = int(term * 2)
                max_conv = max(0, stock_price - conversion_price)
                max_upper = max(0, stock_price - upper_strike)
                dilution = max(0, (stock_price * underlying_shares - principal) - underlying_shares * (max_conv - max_upper))
                flows = [(principal - derivative_cost)] + [-semi_coupon] * (n_periods - 1) + [-(semi_coupon + principal + dilution)]
                return npf.irr(flows) * 2 * 100

            def effective_premium(principal, conversion_price, upper_strike, current_price, initial_price):
                if current_price <= upper_strike:
                    return (upper_strike - initial_price) / initial_price
                hedge = (upper_strike - conversion_price) * (principal / conversion_price) / current_price
                net_shares = (principal / conversion_price) - hedge
                if net_shares <= 0:
                    return np.nan
                return (principal / net_shares - initial_price) / initial_price

            # Plotly animated chart
            fig = make_subplots(
                rows=2, cols=2,
                column_widths=[0.65, 0.32],
                row_heights=[0.3, 0.7],
                specs=[[{"colspan": 2, "type": "table"}, None],
                       [{"type": "xy"}, {"type": "xy"}]],
                horizontal_spacing=0.05,
                vertical_spacing=0.07,
                shared_xaxes=True
            )

            fig.add_trace(go.Table(
                header=dict(
                    values=["Date", "Price", "CoC (%)", "Eff. Premium (%)"],
                    fill_color='black', font=dict(color='white')
                ),
                cells=dict(
                    fill_color='black', font=dict(color='white'),
                    values=[[df['Date'][0].strftime('%Y-%m-%d')],
                            [f"{df['Last Price'].iloc[0]:.2f}"],
                            [f"{coc(initial_price, df['Last Price'].iloc[0]):.2f}%"],
                            [f"{effective_premium(principal, conversion_price, upper_strike, df['Last Price'].iloc[0], initial_price) * 100:.2f}%"]]
                )
            ), row=1, col=1)

            fig.add_trace(go.Scatter(x=[df['Date'][0]], y=[df['Last Price'].iloc[0]],
                                     mode='lines', name='Stock Price', line=dict(color='cyan')), row=2, col=1)
            fig.add_trace(go.Scatter(x=[df['Date'][0]],
                                     y=[effective_premium(principal, conversion_price, upper_strike, df['Last Price'].iloc[0], initial_price) * 100],
                                     mode='lines', name='Effective Premium', line=dict(color='lightgrey')), row=2, col=2)
            fig.add_trace(go.Scatter(x=[df['Date'][0]], y=[0], mode='lines', line=dict(color='rgba(0,0,0,0)'), showlegend=False, hoverinfo='skip'), row=2, col=2)
            fig.add_trace(go.Scatter(x=[df['Date'][0], df['Date'][0]], y=[df['Last Price'].min(), df['Last Price'].max()],
                                     mode='lines', name='Current Date', line=dict(color='white', width=2)), row=2, col=1)

            # Frames
            frames = []
            slider_steps = []
            for i, (idx, row) in enumerate(df.iterrows()):
                date = row['Date']
                price = row['Last Price']
                df_until_now = df.iloc[:i+1]
                ep_series = [effective_premium(principal, conversion_price, upper_strike, p, initial_price) for p in df_until_now['Last Price']]
                step_coc = coc(initial_price, price)
                step_ep = effective_premium(principal, conversion_price, upper_strike, price, initial_price)

                frames.append(go.Frame(data=[
                    go.Table(header=dict(values=["Date", "Price", "CoC (%)", "Eff. Premium (%)"], fill_color='black', font=dict(color='white')),
                             cells=dict(fill_color='black', font=dict(color='white'),
                                        values=[[date.strftime('%Y-%m-%d')], [f"{price:.2f}"], [f"{step_coc:.2f}"], [f"{step_ep:.2f}%"]])),
                    go.Scatter(x=df_until_now['Date'], y=df_until_now['Last Price'], mode='lines', line=dict(color='cyan'), xaxis='x2', yaxis='y2'),
                    go.Scatter(x=[date, date], y=[df['Last Price'].min(), df['Last Price'].max()], mode='lines', line=dict(color='white', width=2), xaxis='x2', yaxis='y2'),
                    go.Scatter(x=df_until_now['Date'], y=ep_series, mode='lines', line=dict(color='lightgrey'), xaxis='x3', yaxis='y3'),
                    go.Scatter(x=[date, date], y=[0,1], mode='lines', line=dict(color='white', width=2), xaxis='x3', yaxis='y3')
                ], name=str(i)))

                slider_steps.append({"args": [[str(i)], {"frame": {"duration": 0, "redraw": True}, "mode": "immediate"}],
                                     "label": date.strftime('%Y-%m-%d'), "method": "animate"})

            fig.frames = frames
            fig.update_layout(
                xaxis=dict(title='Date', range=[df['Date'].min(), df['Date'].max()]),
                xaxis2=dict(title='Date', domain=[0.0, 0.64], range=[df['Date'].min(), df['Date'].max()]),
                xaxis3=dict(title='Date', domain=[0.68, 1.0], range=[df['Date'].min(), df['Date'].max()]),
                yaxis2=dict(title='Stock Price',domain=[0.0, 0.7]),
                yaxis3=dict(title='Effective Premium (%)', tickformat='.0%', side='right', range=[0,1],domain=[0.0, 0.7]),
                font=dict(color='white'),
                plot_bgcolor='#222', paper_bgcolor='#222', width=1500, height=900,
                sliders=[dict(active=0, yanchor="top", xanchor="left", currentvalue={"font": {"size": 18}, "prefix": "Date: ", "visible": True, "xanchor": "right"},
                              transition={"duration": 300, "easing": "cubic-in-out"}, pad={"b": 10, "t": 50}, len=0.9, x=0.1, y=0, steps=slider_steps)],
                updatemenus=[dict(type='buttons', showactive=False, buttons=[
                    dict(label='Play', method='animate', args=[None, {"frame": {"duration": 30, "redraw": True}, "fromcurrent": True}]),
                    dict(label='Pause', method='animate', args=[[None], {"mode": "immediate", "frame": {"duration": 0, "redraw": False}}]),
                    dict(label='Play Backward', method='animate', args=[None, {"frame": {"duration": 30, "redraw": True}, "fromcurrent": True, "direction": "reverse"}])])],
                shapes=[dict(type='rect', xref='x2', yref='y2', x0=df['Date'].min(), x1=df['Date'].max(), y0=conversion_price, y1=upper_strike,
                             fillcolor='rgba(0, 255, 0, 0.15)', line=dict(width=0), layer='below'),
                        dict(type='rect', xref='x2', yref='y2', x0=df['Date'].min(), x1=df['Date'].max(), y0=upper_strike, y1=df['Last Price'].max() + 5,
                             fillcolor='rgba(255, 0, 0, 0.15)', line=dict(width=0), layer='below')]
            )

            st.plotly_chart(fig, use_container_width=True)